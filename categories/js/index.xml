<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>js on 博客</title><link>https://chenkai0520.github.io/categories/js/</link><description>Recent content in js on 博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 09 Jul 2021 15:37:56 +0800</lastBuildDate><atom:link href="https://chenkai0520.github.io/categories/js/index.xml" rel="self" type="application/rss+xml"/><item><title>axios核心源码解读</title><link>https://chenkai0520.github.io/javascript/axios_analyse/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://chenkai0520.github.io/javascript/axios_analyse/</guid><description>转载自axios 核心源码解读
介绍axios 一直在使用axios库，在享受它带来的便利的同时，总感觉不读读它的源码有点对不起它，刚好网上介绍axios源码的文章较少，所以写下这篇文章，权当抛砖引玉。
axios是同构的JavaScript的异步请求库，它可以在浏览器端和NodeJS环境里使用。
VueJS的作者尤大也推荐这个工具，它除了异步请求网络资源功能，还有如下功能：
提供代理功能 提供了拦截器（类似中间件），可以注册在请求发出去之前和收到响应之后的操作 可以获取上传进度和下载进度 提供的adapter选项可以模拟响应数据 自定义引起报错的响应码范围 提供了取消请求的功能 axios的GitHub地址。
那么，它是怎么办到的呢？ 首先说说为什么它可以在浏览器端和NodeJS环境中使用 在axios中，使用适配器设计模式来屏蔽平台的差异性，让使用者可以在浏览器端和NodeJS环境中使用同一套API发起http请求。
axios的默认配置里的adapter是通过getDefaultAdapter()方法来获取的，它的逻辑如下：
function getDefaultAdapter() { var adapter; // Only Node.JS has a process variable that is of [[Class]] process if (typeof process !== &amp;#39;undefined&amp;#39; &amp;amp;&amp;amp; Object.prototype.toString.call(process) === &amp;#39;[object process]&amp;#39;) { // For node use HTTP adapter adapter = require(&amp;#39;./adapters/http&amp;#39;); } else if (typeof XMLHttpRequest !</description></item></channel></rss>